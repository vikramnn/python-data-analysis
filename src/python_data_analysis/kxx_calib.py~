import matplotlib.pyplot as plt
import numpy as np
from numpy.polynomial.chebyshev import Chebyshev, chebval
from numpy.polynomial.polynomial import polyfit, polyval
from scipy.interpolate import interp1d

def plotCalib(df_calib):
    fig, (ax_Rp, ax_Rm) = plt.subplots(2,1)
    fields = np.unique(df_calib['Field (T)'].values)
    num_colors = len(fields)
    cmap = plt.get_cmap('viridis')
    ax_Rp.set_prop_cycle(color=[cmap(1.*k/num_colors) for k in range(num_colors)])
    ax_Rm.set_prop_cycle(color=[cmap(1.*k/num_colors) for k in range(num_colors)])

    df_avg = (df_calib.groupby(['Field (T)','Temp_round (K)'], as_index=False).filter(lambda x: len(x.index)>50)
               .groupby(['Field (T)','Temp_round (K)'], as_index=False).mean())
    #df_avg = df

    Rp_domain = np.log10([df_avg['R+'].values.min(), df_avg['R+'].values.max()])
    Rm_domain = np.log10([df_avg['R-'].values.min(), df_avg['R-'].values.max()])

    df_avg.set_index('R+').groupby('Field (T)')['Temperature (K)'].plot(ax=ax_Rp, linewidth=0, marker='o', ylabel='Temperature (K)', xlabel='R+ ($\Omega$)')
    df_avg.set_index('R-').groupby('Field (T)')['Temperature (K)'].plot(ax=ax_Rm, linewidth=0, marker='o', ylabel='Temperature (K)', xlabel='R- ($\Omega$)')

    ax_Rp.legend(list(map(lambda x: '{}T'.format(x), fields)), ncol=3)
    fig.tight_layout()
    
    return df_avg

def minMaxInterp(df_interp, poly_order, fields):
    
    fig, ((axp_mx, axm_mx), (axp_mn, axm_mn)) = plt.subplots(2,2)

    df_interp.groupby('Field (T)').max().plot(ax=axp_mx, y='R+', linewidth=0, marker='o')
    df_interp.groupby('Field (T)').max().plot(ax=axm_mx, y='R-', linewidth=0, marker='o')
    df_interp.groupby('Field (T)').min().plot(ax=axp_mn, y='R+', linewidth=0, marker='o')
    df_interp.groupby('Field (T)').min().plot(ax=axm_mn, y='R-', linewidth=0, marker='o')

    rp_max = df_interp.groupby('Field (T)').max()['R+'].values
    rp_min = df_interp.groupby('Field (T)').min()['R+'].values
    rm_max = df_interp.groupby('Field (T)').max()['R-'].values
    rm_min = df_interp.groupby('Field (T)').min()['R-'].values

    rp_max_poly = polyfit(fields, rp_max, poly_order)
    fit = polyval(np.linspace(fields[0], fields[-1], 100), rp_max_poly)
    axp_mx.plot(np.linspace(fields[0], fields[-1], 100), fit)

    rp_min_poly = polyfit(fields, rp_min, poly_order)
    fit = polyval(np.linspace(fields[0], fields[-1], 100), rp_min_poly)
    axp_mn.plot(np.linspace(fields[0], fields[-1], 100), fit)

    rm_max_poly = polyfit(fields, rm_max, poly_order)
    fit = polyval(np.linspace(fields[0], fields[-1], 100), rm_max_poly)
    axm_mx.plot(np.linspace(fields[0], fields[-1], 100), fit)

    rm_min_poly = polyfit(fields, rm_min, poly_order)
    fit = polyval(np.linspace(fields[0], fields[-1], 100), rm_min_poly)
    axm_mn.plot(np.linspace(fields[0], fields[-1], 100), fit)
    
    fig.tight_layout()
    
    return rp_max_poly, rp_min_poly, rm_max_poly, rm_min_poly

def minMaxInterpSpline(df_interp, fields, kind='cubic'):
    fig, ((axp_mx, axm_mx), (axp_mn, axm_mn)) = plt.subplots(2,2)
    x_eval = np.linspace(fields[0], fields[-1], 100)

    df_interp.groupby('Field (T)').max().plot(ax=axp_mx, y='R+', linewidth=0, marker='o')
    df_interp.groupby('Field (T)').max().plot(ax=axm_mx, y='R-', linewidth=0, marker='o')
    df_interp.groupby('Field (T)').min().plot(ax=axp_mn, y='R+', linewidth=0, marker='o')
    df_interp.groupby('Field (T)').min().plot(ax=axm_mn, y='R-', linewidth=0, marker='o')

    rp_max = df_interp.groupby('Field (T)').max()['R+'].values
    rp_min = df_interp.groupby('Field (T)').min()['R+'].values
    rm_max = df_interp.groupby('Field (T)').max()['R-'].values
    rm_min = df_interp.groupby('Field (T)').min()['R-'].values

    f_interp_rpmax = interp1d(fields, rp_max, kind=kind)
    axp_mx.plot(x_eval, f_interp_rpmax(x_eval))

    f_interp_rpmin = interp1d(fields, rp_min, kind=kind)
    axp_mn.plot(x_eval, f_interp_rpmin(x_eval))

    f_interp_rmmax = interp1d(fields, rm_max, kind=kind)
    axm_mx.plot(x_eval, f_interp_rmmax(x_eval))

    f_interp_rmmin = interp1d(fields, rm_min, kind=kind)
    axm_mn.plot(x_eval, f_interp_rmmin(x_eval))
    
    fig.tight_layout()
    
    return f_interp_rpmax, f_interp_rpmin, f_interp_rmmax, f_interp_rmmin

def chebyCalibFields(df_avg, cheby_deg, fields):
    cp = []
    cm = []
    
    
    plot_dim = int(np.ceil(np.sqrt(len(fields))))
    fig_p, axes_p = plt.subplots(plot_dim, plot_dim)
    fig_m, axes_m = plt.subplots(plot_dim, plot_dim)
    if plot_dim != 1:
        axes_p = axes_p.flatten(); axes_m = axes_m.flatten()
    
    for i,field in enumerate(fields):
        df_slice = df_avg[df_avg['Field (T)'] == field]
        Rp = df_slice['R+'].values
        Rm = df_slice['R-'].values
        temperature = df_slice['Temperature (K)'].values

        domain_Rp = np.log10(np.array([Rp.min(), Rp.max()]))
        domain_Rm = np.log10(np.array([Rm.min(), Rm.max()]))

        x = np.linspace(-1,1,100)

        #Fitting T+
        coeffs = Chebyshev.fit(np.log10(Rp), np.log10(temperature), cheby_deg, domain=domain_Rp).coef
        cp.append(coeffs)
        z = (x*(domain_Rp[1] - domain_Rp[0]) + domain_Rp[0] + domain_Rp[1])/2
        if plot_dim != 1:
            ax_Rp = axes_p[i]
        else:
            ax_Rp = axes_p
        ax_Rp.plot(Rp, temperature, linewidth=0, marker='o')
        ax_Rp.plot(10**z, 10**chebval(x, coeffs))
        ax_Rp.set_ylabel('T (K)'); ax_Rp.set_xlabel('R+ ($\Omega$)')
        ax_Rp.set_title('{} T'.format(field))

        #Fitting T-
        coeffs = Chebyshev.fit(np.log10(Rm), np.log10(temperature), cheby_deg, domain=domain_Rm).coef
        cm.append(coeffs)
        z = (x*(domain_Rm[1] - domain_Rm[0]) + domain_Rm[0] + domain_Rm[1])/2
        if plot_dim != 1:
            ax_Rm = axes_m[i]
        else:
            ax_Rm = axes_m
        ax_Rm.plot(Rm, temperature, linewidth=0, marker='o')
        ax_Rm.plot(10**z, 10**chebval(x, coeffs))
        ax_Rm.set_ylabel('T (K)'); ax_Rm.set_xlabel('R- ($\Omega$)')
        ax_Rm.set_title('{} T'.format(field))

    fig_p.tight_layout(); fig_m.tight_layout()
        
    return cp, cm

def interpChebyPoly(cp, cm, poly_order, fields):
    cheby_poly_coefs_p = np.array([])
    cheby_poly_coefs_m = np.array([])
    plot_dim = int(np.ceil(np.sqrt(cheby_deg)))
    fig_p, axes_p = plt.subplots(plot_dim, plot_dim)
    fig_m, axes_m = plt.subplots(plot_dim, plot_dim)
    axes_p = axes_p.flatten(); axes_m = axes_m.flatten()

    for i in range(cheby_deg+1):
        ax = axes_p[i]
        ax.set_title('c{}+'.format(i)); ax.set_xlabel('Field (T)')

        cp_i = np.array([c[i] for c in cp])
        poly_coefs_p = polyfit(fields, cp_i, poly_order)
        fit = polyval(np.linspace(fields[0], fields[-1], 100), poly_coefs_p)
        cheby_poly_coefs_p = np.append(cheby_poly_coefs_p, poly_coefs_p)

        ax.plot(fields, cp_i, marker='o', linewidth=0, label='c{}'.format(i))
        ax.plot(np.linspace(fields[0], fields[-1], 100), fit)
        fig_p.tight_layout()

        ax = axes_m[i]
        ax.set_title('c{}-'.format(i)); ax.set_xlabel('Field (T)')

        cm_i = np.array([c[i] for c in cm])
        poly_coefs_m = polyfit(fields, cm_i, poly_order)
        fit = polyval(np.linspace(fields[0], fields[-1], 100), poly_coefs_m)
        cheby_poly_coefs_m = np.append(cheby_poly_coefs_m, poly_coefs_m)

        ax.plot(fields, cm_i, marker='o', linewidth=0, label='c{}'.format(i))
        ax.plot(np.linspace(fields[0], fields[-1], 100), fit)
        fig_m.tight_layout()

    cheby_poly_coefs_p = cheby_poly_coefs_p.reshape(cheby_deg+1,poly_order+1).T
    cheby_poly_coefs_m = cheby_poly_coefs_m.reshape(cheby_deg+1,poly_order+1).T
    
    return cheby_poly_coefs_p, cheby_poly_coefs_m

def interpChebyPolySpline1D(cp, cm, cheby_deg, fields, kind='cubic'):
    #lists of interpolations functions for each cheby coeff
    #Functions are evaluated at a particular field
    cheby_interp_p = []
    cheby_interp_m = []
    x_eval = np.linspace(fields[0], fields[-1], 100)
    plot_dim = int(np.ceil(np.sqrt(cheby_deg+1)))
    fig_p, axes_p = plt.subplots(plot_dim, plot_dim)
    fig_m, axes_m = plt.subplots(plot_dim, plot_dim)
    axes_p = axes_p.flatten(); axes_m = axes_m.flatten()

    for i in range(cheby_deg+1):
        ax = axes_p[i]
        ax.set_title('c{}+'.format(i)); ax.set_xlabel('Field (T)')

        cp_i = np.array([c[i] for c in cp])
        f_interp = interp1d(fields, cp_i, kind=kind)
        cheby_interp_p.append(f_interp)

        ax.plot(fields, cp_i, marker='o', linewidth=0, label='c{}'.format(i))
        ax.plot(x_eval, f_interp(x_eval))

        ax = axes_m[i]
        ax.set_title('c{}-'.format(i)); ax.set_xlabel('Field (T)')

        cm_i = np.array([c[i] for c in cm])
        f_interp = interp1d(fields, cm_i, kind=kind)
        cheby_interp_m.append(f_interp)

        ax.plot(fields, cm_i, marker='o', linewidth=0, label='c{}'.format(i))
        ax.plot(x_eval, f_interp(x_eval))
        
    fig_p.tight_layout(); fig_m.tight_layout()
    
    return cheby_interp_p, cheby_interp_m

def extractTemp(R, r_max, r_min, cheby_coefs):
    logR = np.log10(R)
    domain = np.log10([r_min, r_max])
    
    X = ((logR - domain[0]) - (domain[1] - logR))/(domain[1]-domain[0])
    T = 10**chebval(X, cheby_coefs)
    return T

def extractTempSpline(R, B, f_interp_max, f_interp_min, cheby_interp_funcs):
    cheby_coefs_eval = np.array([f(B) for f in cheby_interp_funcs])
    logR = np.log10(R)
    r_min = f_interp_min(B)
    r_max = f_interp_max(B)
    domain = np.log10([r_min, r_max])
    
    X = ((logR - domain[0]) - (domain[1] - logR))/(domain[1]-domain[0])
    T = 10**chebval(X, cheby_coefs_eval)
    return T
    
def extractTempPoly(R, B, r_max_poly, r_min_poly, cheby_poly_coefs):
    '''
    B is fixed, R is an array, domain is [log10(R_lower), log10(R_upper)]
    cheby_poly_coefs is a matrix of coefficient values at different fields
    e.g. c0(B) = c00 + c01*B + ... +c0M * B**M
         ...
         [[c00 c10 ... cM0
            .           .
           c0M c1M ... cMM]]
    '''
    cheby_coefs_eval = polyval(B, cheby_poly_coefs) # This gives a row array of the cheby coefficients at field B
    logR = np.log10(R)
    r_min = polyval(B, r_min_poly)
    r_max = polyval(B, r_max_poly)
    domain = np.log10([r_min, r_max])
    
    X = ((logR - domain[0]) - (domain[1] - logR))/(domain[1]-domain[0])
    T = 10**chebval(X, cheby_coefs_eval)
    return T

